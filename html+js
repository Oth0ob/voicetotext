<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Voice to Text Converter</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f2f2f2;
      padding: 20px;
    }
    
    .container {
      max-width: 600px;
      margin: 0 auto;
      background-color: white;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    
    h1 {
      text-align: center;
      margin-bottom: 30px;
    }
    
    #speech-to-text {
      width: 100%;
      height: 150px;
      font-size: 16px;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      resize: none;
    }
    
    #start-recording, #stop-recording {
      display: block;
      margin: 20px auto;
      padding: 10px 20px;
      font-size: 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    
    #stop-recording {
      background-color: #f44336;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Voice to Text Converter</h1>
    <textarea id="speech-to-text" placeholder="Transcribed text will appear here..."></textarea>
    <button id="start-recording">Start Recording</button>
    <button id="stop-recording">Stop Recording</button>
  </div>

  <script>
    const speechToText = document.getElementById('speech-to-text');
    const startRecordingButton = document.getElementById('start-recording');
    const stopRecordingButton = document.getElementById('stop-recording');

    let recognition;

    startRecordingButton.addEventListener('click', () => {
      recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
      recognition.continuous = true;
      recognition.interimResults = true;

      recognition.addEventListener('result', (event) => {
        let transcript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            transcript += event.results[i][0].transcript;
          }
        }
        speechToText.value = transcript;
      });

      recognition.start();
      startRecordingButton.style.display = 'none';
      stopRecordingButton.style.display = 'block';
    });

    stopRecordingButton.addEventListener('click', () => {
      recognition.stop();
      startRecordingButton.style.display = 'block';
      stopRecordingButton.style.display = 'none';
    });
  </script>
</body>
</html>
